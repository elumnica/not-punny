{"ast":null,"code":"var _jsxFileName = \"/Users/elvislumnica/Desktop/not-punny/src/components/GetPuns.js\";\nimport React from 'react';\nimport Puns from './Puns';\nimport Button from './Button'; // var baseURL = \"https://sv443.net/jokeapi/v2\";\n// var categories = [\"Programming\", \"Miscellaneous\", \"Pun\"];\n// var params = [\n//     \"blacklistFlags=nsfw,religious,racist\",\n//     \"idRange=0-100\"\n// ];\n// var xhr = new XMLHttpRequest();\n// xhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n// xhr.onreadystatechange = function() {\n//     if(xhr.readyState == 4 && xhr.status < 300) \n//     // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n//     {\n//         var randomJoke = JSON.parse(xhr.responseText);\n//         if(randomJoke.type == \"single\")\n//         {\n//             // If type == \"single\", the joke only has the \"joke\" property\n//             alert(randomJoke.joke);\n//         }\n//         else\n//         {\n//             // If type == \"single\", the joke only has the \"joke\" property\n//             alert(randomJoke.setup);\n//             alert(randomJoke.delivery);\n//         }\n//     }\n//     else if(xhr.readyState == 4)\n//     {\n//         alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n//     }\n// };\n// xhr.send(PunBox);\n\nclass PunBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      setup: '',\n      punline: '',\n      newPun: false\n    };\n\n    this.componentDidMount = () => {\n      this.getNewPun();\n    };\n  }\n\n  // getNewPun = () => {\n  //     fetch(\"https://sv443.net/jokeapi/v2/joke/Pun\")\n  //     .then(response => {\n  //         return response.json();\n  //     })\n  //     .then(data => {\n  //         this.setState({\n  //             setup: data[0].setup,\n  //             newPun: true,\n  //         })\n  //     })\n  //     .catch(err => {\n  //         console.log(err);\n  //     });\n  // }\n  // getPunline = () => {\n  //     this.setState({\n  //         newPun: false\n  //     });\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"PunBox\",\n      id: \"PunBox\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Puns, {\n      setup: this.state.setup,\n      punchline: this.state.punchline,\n      newPun: this.state.newPun,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      setup: this.state.setup,\n      punchline: this.state.punchline,\n      newPun: this.state.newPun,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default PunBox;","map":{"version":3,"sources":["/Users/elvislumnica/Desktop/not-punny/src/components/GetPuns.js"],"names":["React","Puns","Button","PunBox","Component","state","setup","punline","newPun","componentDidMount","getNewPun","render","width","punchline"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCC,KADiC,GACzB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE,EAFL;AAGJC,MAAAA,MAAM,EAAE;AAHJ,KADyB;;AAAA,SAOjCC,iBAPiC,GAOb,MAAM;AACtB,WAAKC,SAAL;AACH,KATgC;AAAA;;AAYjC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,EAAE,EAAC,QAA3B;AAAoC,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AACI,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,KADtB;AAEI,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWQ,SAF1B;AAGI,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWG,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAMI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KADtB;AAEI,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWQ,SAF1B;AAGI,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWG,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAcH;;AAjDgC;;AAoDrC,eAAeL,MAAf","sourcesContent":["import React from 'react';\nimport Puns from './Puns';\nimport Button from './Button';\n\n\n// var baseURL = \"https://sv443.net/jokeapi/v2\";\n// var categories = [\"Programming\", \"Miscellaneous\", \"Pun\"];\n// var params = [\n//     \"blacklistFlags=nsfw,religious,racist\",\n//     \"idRange=0-100\"\n// ];\n\n// var xhr = new XMLHttpRequest();\n// xhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\n// xhr.onreadystatechange = function() {\n//     if(xhr.readyState == 4 && xhr.status < 300) \n//     // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n//     {\n//         var randomJoke = JSON.parse(xhr.responseText);\n\n//         if(randomJoke.type == \"single\")\n//         {\n//             // If type == \"single\", the joke only has the \"joke\" property\n//             alert(randomJoke.joke);\n//         }\n//         else\n//         {\n//             // If type == \"single\", the joke only has the \"joke\" property\n//             alert(randomJoke.setup);\n//             alert(randomJoke.delivery);\n//         }\n//     }\n//     else if(xhr.readyState == 4)\n//     {\n//         alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n//     }\n// };\n\n// xhr.send(PunBox);\n\nclass PunBox extends React.Component {\n    state = {\n        setup: '',\n        punline: '',\n        newPun: false,\n    }\n\n    componentDidMount = () => {\n        this.getNewPun();\n    }\n\n\n    // getNewPun = () => {\n    //     fetch(\"https://sv443.net/jokeapi/v2/joke/Pun\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n\n    //     .then(data => {\n    //         this.setState({\n    //             setup: data[0].setup,\n    //             newPun: true,\n    //         })\n    //     })\n    //     .catch(err => {\n    //         console.log(err);\n    //     });\n    // }\n    // getPunline = () => {\n    //     this.setState({\n    //         newPun: false\n    //     });\n\n\n    render(){\n        return(\n            <div className='PunBox' id='PunBox' style={{width: '100%'}}>\n                <Puns\n                    setup={this.state.setup}\n                    punchline={this.state.punchline}\n                    newPun={this.state.newPun}\n                    />\n                <Button\n                    setup={this.state.setup}\n                    punchline={this.state.punchline}\n                    newPun={this.state.newPun}\n                    />\n            </div>\n        )\n    }\n}\n\nexport default PunBox;"]},"metadata":{},"sourceType":"module"}