{"ast":null,"code":"var _jsxFileName = \"/Users/elvislumnica/Desktop/not-punny/src/components/GetPuns.js\";\nimport React from 'react';\nimport Puns from './Puns';\nimport Button from './Button';\nvar baseURL = \"https://sv443.net/jokeapi/v2\";\nvar categories = [\"Programming\", \"Miscellaneous\", \"Pun\"];\nvar params = [\"blacklistFlags=nsfw,religious,racist\", \"idRange=0-100\"];\nvar getNewPun = new XMLHttpRequest();\nxhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\nxhr.onreadystatechange = function () {\n  if (getNewPun.readyState == 4 && getNewPun.status < 300) // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n    {\n      var randomJoke = JSON.parse(getNewPun.responseText);\n\n      if (randomJoke.type == \"single\") {\n        // If type == \"single\", the joke only has the \"joke\" property\n        alert(randomJoke.joke);\n      } else {\n        // If type == \"single\", the joke only has the \"joke\" property\n        alert(randomJoke.setup);\n        alert(randomJoke.delivery);\n      }\n    } else if (getNewPun.readyState == 4) {\n    alert(\"Error while requesting joke.\\n\\nStatus code: \" + getNewPun.status + \"\\nServer response: \" + getNewPun.responseText);\n  }\n};\n\ngetNewPun.send();\n\nclass PunBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      setup: '',\n      punline: '',\n      newPun: false\n    };\n\n    this.componentDidMount = () => {\n      this.getNewPun();\n    };\n  }\n\n  // getNewPun = () => {\n  //     fetch(\"https://sv443.net/jokeapi/v2/joke/Pun\")\n  //     .then(response => {\n  //         return response.json();\n  //     })\n  //     .then(data => {\n  //         this.setState({\n  //             setup: data[0].setup,\n  //             newPun: true,\n  //         })\n  //     })\n  //     .catch(err => {\n  //         console.log(err);\n  //     });\n  // }\n  // getPunline = () => {\n  //     this.setState({\n  //         newPun: false\n  //     });\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"PunBox\",\n      id: \"PunBox\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Puns, {\n      setup: this.state.setup,\n      punchline: this.state.punchline,\n      newPun: this.state.newPun,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      setup: this.state.setup,\n      punchline: this.state.punchline,\n      newPun: this.state.newPun,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default PunBox;","map":{"version":3,"sources":["/Users/elvislumnica/Desktop/not-punny/src/components/GetPuns.js"],"names":["React","Puns","Button","baseURL","categories","params","getNewPun","XMLHttpRequest","xhr","open","join","onreadystatechange","readyState","status","randomJoke","JSON","parse","responseText","type","alert","joke","setup","delivery","send","PunBox","Component","state","punline","newPun","componentDidMount","render","width","punchline"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGA,IAAIC,OAAO,GAAG,8BAAd;AACA,IAAIC,UAAU,GAAG,CAAC,aAAD,EAAgB,eAAhB,EAAiC,KAAjC,CAAjB;AACA,IAAIC,MAAM,GAAG,CACT,sCADS,EAET,eAFS,CAAb;AAKA,IAAIC,SAAS,GAAG,IAAIC,cAAJ,EAAhB;AACAC,GAAG,CAACC,IAAJ,CAAS,KAAT,EAAgBN,OAAO,GAAG,QAAV,GAAqBC,UAAU,CAACM,IAAX,CAAgB,GAAhB,CAArB,GAA4C,GAA5C,GAAkDL,MAAM,CAACK,IAAP,CAAY,GAAZ,CAAlE;;AAEAF,GAAG,CAACG,kBAAJ,GAAyB,YAAW;AAChC,MAAGL,SAAS,CAACM,UAAV,IAAwB,CAAxB,IAA6BN,SAAS,CAACO,MAAV,GAAmB,GAAnD,EACA;AACA;AACI,UAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWV,SAAS,CAACW,YAArB,CAAjB;;AAEA,UAAGH,UAAU,CAACI,IAAX,IAAmB,QAAtB,EACA;AACI;AACAC,QAAAA,KAAK,CAACL,UAAU,CAACM,IAAZ,CAAL;AACH,OAJD,MAMA;AACI;AACAD,QAAAA,KAAK,CAACL,UAAU,CAACO,KAAZ,CAAL;AACAF,QAAAA,KAAK,CAACL,UAAU,CAACQ,QAAZ,CAAL;AACH;AACJ,KAhBD,MAiBK,IAAGhB,SAAS,CAACM,UAAV,IAAwB,CAA3B,EACL;AACIO,IAAAA,KAAK,CAAC,kDAAkDb,SAAS,CAACO,MAA5D,GAAqE,qBAArE,GAA6FP,SAAS,CAACW,YAAxG,CAAL;AACH;AACJ,CAtBD;;AAwBAX,SAAS,CAACiB,IAAV;;AAEA,MAAMC,MAAN,SAAqBxB,KAAK,CAACyB,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCC,KADiC,GACzB;AACJL,MAAAA,KAAK,EAAE,EADH;AAEJM,MAAAA,OAAO,EAAE,EAFL;AAGJC,MAAAA,MAAM,EAAE;AAHJ,KADyB;;AAAA,SAOjCC,iBAPiC,GAOb,MAAM;AACtB,WAAKvB,SAAL;AACH,KATgC;AAAA;;AAYjC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAwB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,EAAE,EAAC,QAA3B;AAAoC,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AACI,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWL,KADtB;AAEI,MAAA,SAAS,EAAE,KAAKK,KAAL,CAAWM,SAF1B;AAGI,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWE,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAMI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWL,KADtB;AAEI,MAAA,SAAS,EAAE,KAAKK,KAAL,CAAWM,SAF1B;AAGI,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWE,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAcH;;AAjDgC;;AAoDrC,eAAeJ,MAAf","sourcesContent":["import React from 'react';\nimport Puns from './Puns';\nimport Button from './Button';\n\n\nvar baseURL = \"https://sv443.net/jokeapi/v2\";\nvar categories = [\"Programming\", \"Miscellaneous\", \"Pun\"];\nvar params = [\n    \"blacklistFlags=nsfw,religious,racist\",\n    \"idRange=0-100\"\n];\n\nvar getNewPun = new XMLHttpRequest();\nxhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\nxhr.onreadystatechange = function() {\n    if(getNewPun.readyState == 4 && getNewPun.status < 300) \n    // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n    {\n        var randomJoke = JSON.parse(getNewPun.responseText);\n\n        if(randomJoke.type == \"single\")\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.joke);\n        }\n        else\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.setup);\n            alert(randomJoke.delivery);\n        }\n    }\n    else if(getNewPun.readyState == 4)\n    {\n        alert(\"Error while requesting joke.\\n\\nStatus code: \" + getNewPun.status + \"\\nServer response: \" + getNewPun.responseText);\n    }\n};\n\ngetNewPun.send();\n\nclass PunBox extends React.Component {\n    state = {\n        setup: '',\n        punline: '',\n        newPun: false,\n    }\n\n    componentDidMount = () => {\n        this.getNewPun();\n    }\n\n\n    // getNewPun = () => {\n    //     fetch(\"https://sv443.net/jokeapi/v2/joke/Pun\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n\n    //     .then(data => {\n    //         this.setState({\n    //             setup: data[0].setup,\n    //             newPun: true,\n    //         })\n    //     })\n    //     .catch(err => {\n    //         console.log(err);\n    //     });\n    // }\n    // getPunline = () => {\n    //     this.setState({\n    //         newPun: false\n    //     });\n\n\n    render(){\n        return(\n            <div className='PunBox' id='PunBox' style={{width: '100%'}}>\n                <Puns\n                    setup={this.state.setup}\n                    punchline={this.state.punchline}\n                    newPun={this.state.newPun}\n                    />\n                <Button\n                    setup={this.state.setup}\n                    punchline={this.state.punchline}\n                    newPun={this.state.newPun}\n                    />\n            </div>\n        )\n    }\n}\n\nexport default PunBox;"]},"metadata":{},"sourceType":"module"}