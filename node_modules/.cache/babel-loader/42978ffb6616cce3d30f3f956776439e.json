{"ast":null,"code":"var _jsxFileName = \"/Users/elvislumnica/Desktop/not-punny/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\nimport Button from './components/Button.js';\n\nfunction App() {\n  var baseURL = \"https://sv443.net/jokeapi/v2\";\n  var categories = [\"Pun\"];\n  var params = [\"blacklistFlags=nsfw,religious,racist\", \"idRange=0-100\"];\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4 && xhr.status < 300) // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n      {\n        var randomJoke = JSON.parse(xhr.responseText);\n\n        if (randomJoke.type == \"single\") {\n          // If type == \"single\", the joke only has the \"joke\" property\n          alert(randomJoke.joke);\n        } else {\n          // If type == \"single\", the joke only has the \"joke\" property\n          alert(randomJoke.setup);\n          alert(randomJoke.delivery);\n        }\n      } else if (xhr.readyState == 4) {\n      alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n    }\n  };\n\n  xhr.send();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Welcome to not Punny!\")), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elvislumnica/Desktop/not-punny/src/App.js"],"names":["React","useState","useEffect","Container","Row","ResponsiveEmbed","Button","App","baseURL","categories","params","xhr","XMLHttpRequest","open","join","onreadystatechange","readyState","status","randomJoke","JSON","parse","responseText","type","alert","joke","setup","delivery","send","error","setError","isLoading","setIsLoading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAAgC,iBAAhC;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAIA,SAASC,GAAT,GAAe;AACb,MAAIC,OAAO,GAAG,8BAAd;AACA,MAAIC,UAAU,GAAG,CAAC,KAAD,CAAjB;AACA,MAAIC,MAAM,GAAG,CACX,sCADW,EAEX,eAFW,CAAb;AAKA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBL,OAAO,GAAG,QAAV,GAAqBC,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAArB,GAA4C,GAA5C,GAAkDJ,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAlE;;AAEAH,EAAAA,GAAG,CAACI,kBAAJ,GAAyB,YAAW;AAClC,QAAGJ,GAAG,CAACK,UAAJ,IAAkB,CAAlB,IAAuBL,GAAG,CAACM,MAAJ,GAAa,GAAvC,EAA4C;AAC5C;AACI,YAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWT,GAAG,CAACU,YAAf,CAAjB;;AAEA,YAAGH,UAAU,CAACI,IAAX,IAAmB,QAAtB,EACA;AACI;AACAC,UAAAA,KAAK,CAACL,UAAU,CAACM,IAAZ,CAAL;AACH,SAJD,MAMA;AACI;AACAD,UAAAA,KAAK,CAACL,UAAU,CAACO,KAAZ,CAAL;AACAF,UAAAA,KAAK,CAACL,UAAU,CAACQ,QAAZ,CAAL;AACH;AACJ,OAfD,MAgBK,IAAGf,GAAG,CAACK,UAAJ,IAAkB,CAArB,EACL;AACIO,MAAAA,KAAK,CAAC,kDAAkDZ,GAAG,CAACM,MAAtD,GAA+D,qBAA/D,GAAuFN,GAAG,CAACU,YAA5F,CAAL;AACH;AACF,GArBD;;AAuBFV,EAAAA,GAAG,CAACgB,IAAJ;AACE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC,KAAD,CAA1C;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD;;AAED,eAAeM,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, } from 'react-bootstrap';\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\nimport Button from './components/Button.js';\n\n\n\nfunction App() {\n  var baseURL = \"https://sv443.net/jokeapi/v2\";\n  var categories = [\"Pun\"];\n  var params = [\n    \"blacklistFlags=nsfw,religious,racist\",\n    \"idRange=0-100\"\n  ];\n\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\n  xhr.onreadystatechange = function() {\n    if(xhr.readyState == 4 && xhr.status < 300) // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n    {\n        var randomJoke = JSON.parse(xhr.responseText);\n\n        if(randomJoke.type == \"single\")\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.joke);\n        }\n        else\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.setup);\n            alert(randomJoke.delivery);\n        }\n    }\n    else if(xhr.readyState == 4)\n    {\n        alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n    }\n  };\n\nxhr.send();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className='parent'>\n      <div className='card'>\n        <h2 className='title'>Welcome to not Punny!</h2>\n      </div>\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}