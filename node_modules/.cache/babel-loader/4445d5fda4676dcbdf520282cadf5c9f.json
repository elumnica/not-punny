{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\nvar baseURL = \"https://sv443.net/jokeapi/v2\";\nvar categories = [\"Pun\"];\nvar params = [\"blacklistFlags=nsfw,religious,racist\", \"idRange=0-100\"];\nvar xhr = new XMLHttpRequest();\nxhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\nxhr.onreadystatechange = function () {\n  if (xhr.readyState == 4 && xhr.status < 300) // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n    {\n      var randomJoke = JSON.parse(xhr.responseText);\n\n      if (randomJoke.type == \"single\") {\n        // If type == \"single\", the joke only has the \"joke\" property\n        alert(randomJoke.joke);\n      } else {\n        // If type == \"single\", the joke only has the \"joke\" property\n        alert(randomJoke.setup);\n        alert(randomJoke.delivery);\n      }\n    } else if (xhr.readyState == 4) {\n    alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n  }\n};\n\nxhr.send();\n\nfunction App() {}\n\nexport default App;","map":{"version":3,"sources":["/Users/elvislumnica/Desktop/not-punny/src/App.js"],"names":["React","useState","useEffect","Container","Row","ResponsiveEmbed","baseURL","categories","params","xhr","XMLHttpRequest","open","join","onreadystatechange","readyState","status","randomJoke","JSON","parse","responseText","type","alert","joke","setup","delivery","send","App"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AAEA,IAAIC,OAAO,GAAG,8BAAd;AACA,IAAIC,UAAU,GAAG,CAAC,KAAD,CAAjB;AACA,IAAIC,MAAM,GAAG,CACT,sCADS,EAET,eAFS,CAAb;AAKA,IAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBL,OAAO,GAAG,QAAV,GAAqBC,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAArB,GAA4C,GAA5C,GAAkDJ,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAlE;;AAEAH,GAAG,CAACI,kBAAJ,GAAyB,YAAW;AAChC,MAAGJ,GAAG,CAACK,UAAJ,IAAkB,CAAlB,IAAuBL,GAAG,CAACM,MAAJ,GAAa,GAAvC,EAA4C;AAC5C;AACI,UAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWT,GAAG,CAACU,YAAf,CAAjB;;AAEA,UAAGH,UAAU,CAACI,IAAX,IAAmB,QAAtB,EACA;AACI;AACAC,QAAAA,KAAK,CAACL,UAAU,CAACM,IAAZ,CAAL;AACH,OAJD,MAMA;AACI;AACAD,QAAAA,KAAK,CAACL,UAAU,CAACO,KAAZ,CAAL;AACAF,QAAAA,KAAK,CAACL,UAAU,CAACQ,QAAZ,CAAL;AACH;AACJ,KAfD,MAgBK,IAAGf,GAAG,CAACK,UAAJ,IAAkB,CAArB,EACL;AACIO,IAAAA,KAAK,CAAC,kDAAkDZ,GAAG,CAACM,MAAtD,GAA+D,qBAA/D,GAAuFN,GAAG,CAACU,YAA5F,CAAL;AACH;AACJ,CArBD;;AAuBAV,GAAG,CAACgB,IAAJ;;AAEA,SAASC,GAAT,GAAe,CAEd;;AAED,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\n\nvar baseURL = \"https://sv443.net/jokeapi/v2\";\nvar categories = [\"Pun\"];\nvar params = [\n    \"blacklistFlags=nsfw,religious,racist\",\n    \"idRange=0-100\"\n];\n\nvar xhr = new XMLHttpRequest();\nxhr.open(\"GET\", baseURL + \"/joke/\" + categories.join(\",\") + \"?\" + params.join(\"&\"));\n\nxhr.onreadystatechange = function() {\n    if(xhr.readyState == 4 && xhr.status < 300) // readyState 4 means request has finished + we only want to parse the joke if the request was successful (status code lower than 300)\n    {\n        var randomJoke = JSON.parse(xhr.responseText);\n\n        if(randomJoke.type == \"single\")\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.joke);\n        }\n        else\n        {\n            // If type == \"single\", the joke only has the \"joke\" property\n            alert(randomJoke.setup);\n            alert(randomJoke.delivery);\n        }\n    }\n    else if(xhr.readyState == 4)\n    {\n        alert(\"Error while requesting joke.\\n\\nStatus code: \" + xhr.status + \"\\nServer response: \" + xhr.responseText);\n    }\n};\n\nxhr.send();\n\nfunction App() {\n  \n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}